import os
import logging
import time
from iqoptionapi.stable_api import IQ_Option

# Configura o logging para ver as mensagens da API
logging.basicConfig(level=logging.INFO, format='%(asctime)s %(message)s')


def run_bot():
    """
    Fun√ß√£o principal que executa o bot de teste.
    """
    # --- 1. Obter Credenciais das Vari√°veis de Ambiente ---
    email = os.getenv('IQ_EMAIL')
    senha = os.getenv('IQ_PASSWORD')

    if not email or not senha:
        print("Erro: As vari√°veis de ambiente IQ_EMAIL e IQ_PASSWORD n√£o foram definidas.")
        print("Por favor, configure-as antes de executar o script.")
        return

    print("--- Iniciando Bot de Teste da IQ Option API ---")

    # --- 2. Conectar √† API ---
    # Voc√™ pode precisar ajustar o host se a conex√£o falhar. Ex: "wss://ws.eu.iqoption.com/echo/websocket"
    api = IQ_Option(email, senha)
    conectado, razao = api.connect()

    if not conectado:
        print(f"Falha na conex√£o. Raz√£o: {razao}")
        return

    print("‚úÖ Conectado com sucesso!")

    try:
        # --- 3. Mudar para a Conta de Treinamento (MUITO IMPORTANTE) ---
        print("üîÑ Alterando para a conta de TREINAMENTO (PRACTICE)...")
        api.change_balance('PRACTICE')

        # --- 4. Obter e Exibir o Saldo ---
        saldo = api.get_balance()
        print(f"üí∞ Saldo da conta de treinamento: ${saldo:,.2f}")

        # --- 5. Obter Dados de um Ativo ---
        ativo = "GBPUSD-OTC"
        print(f"üìà Obtendo dados para o ativo: {ativo}...")

        # Obt√©m as √∫ltimas velas para verificar o pre√ßo
        velas = api.get_candles(ativo, 60, 5, time.time())
        if velas:
            preco_atual = velas[-1]['close']
            print(f"üìä Pre√ßo de fechamento da √∫ltima vela de 1 min: {preco_atual}")
        else:
            print(f"N√£o foi poss√≠vel obter dados para {ativo}. Talvez o mercado esteja fechado.")
            # Para testes fora do hor√°rio de mercado, use ativos OTC. Ex: "EURUSD-OTC"
            ativo = "GBPUSD-OTC"
            print(f"Tentando com o ativo {ativo}...")

        # --- 6. Realizar uma Opera√ß√£o de Teste ---
        valor_entrada = 1  # Valor em d√≥lares para a opera√ß√£o
        direcao = "call"  # "call" (sobe) ou "put" (desce)
        expiracao = 1  # Dura√ß√£o em minutos

        print(
            f"ü§ñ Realizando uma opera√ß√£o de teste: {direcao} de ${valor_entrada} em {ativo} com expira√ß√£o de {expiracao} minuto(s)...")

        check, order_id = api.buy(valor_entrada, ativo, direcao, expiracao)

        if check:
            print(f"‚úÖ Opera√ß√£o de teste enviada com sucesso! ID do pedido: {order_id}")
            # Espera o resultado (opcional)
            resultado = api.check_win_v4(order_id)
            print(f"ü§ë Resultado da opera√ß√£o: Lucro de ${resultado[1]:,.2f}")
        else:
            print("‚ùå Falha ao enviar a opera√ß√£o de teste.")

    except Exception as e:
        print(f"Ocorreu um erro durante a execu√ß√£o: {e}")

    finally:
        # --- 7. Desconectar ---
        print("--- Desconectando da API ---")
        api.disconnect()


if __name__ == "__main__":
    run_bot()